# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:39:38+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    BoxScore,
    FieldFormatAllTeamsGetResponse,
    FieldFormatBoxScoresDateGetResponse,
    FieldFormatBoxScoresDeltaDateMinutesGetResponse,
    FieldFormatDfsSlatesByDateDateGetResponse,
    FieldFormatFreeAgentsGetResponse,
    FieldFormatGamesByDateDateGetResponse,
    FieldFormatGamesSeasonGetResponse,
    FieldFormatHitterVsPitcherHitteridPitcheridGetResponse,
    FieldFormatNewsByDateDateGetResponse,
    FieldFormatNewsByPlayerIDPlayeridGetResponse,
    FieldFormatNewsGetResponse,
    FieldFormatPlayerGameStatsByDateDateGetResponse,
    FieldFormatPlayerGameStatsBySeasonSeasonPlayeridNumberofgamesGetResponse,
    FieldFormatPlayerSeasonAwayStatsSeasonGetResponse,
    FieldFormatPlayerSeasonHomeStatsSeasonGetResponse,
    FieldFormatPlayerSeasonSplitStatsSeasonSplitGetResponse,
    FieldFormatPlayerSeasonStatsByTeamSeasonTeamGetResponse,
    FieldFormatPlayerSeasonStatsSeasonGetResponse,
    FieldFormatPlayerSeasonStatsSplitByTeamSeasonGetResponse,
    FieldFormatPlayersGetResponse,
    FieldFormatPlayersTeamGetResponse,
    FieldFormatStadiumsGetResponse,
    FieldFormatStandingsSeasonGetResponse,
    FieldFormatTeamGameStatsByDateDateGetResponse,
    FieldFormatTeamGameStatsBySeasonSeasonTeamidNumberofgamesGetResponse,
    FieldFormatTeamHittersVsPitcherGameidTeamGetResponse,
    FieldFormatTeamSeasonStatsSeasonGetResponse,
    FieldFormatTeamsGetResponse,
    Format,
    Format17,
    Format18,
    Format27,
    Format28,
    Format30,
    Format31,
    Player,
    PlayerGame,
    PlayerSeason,
    Season,
    Split,
)

app = MCPProxy(
    contact={'x-twitter': 'nfldata'},
    description='MLB scores, stats, and news API.',
    title='MLB v3 Stats',
    version='1.0',
    servers=[
        {'url': 'http://azure-api.sportsdata.io/v3/mlb/stats'},
        {'url': 'https://azure-api.sportsdata.io/v3/mlb/stats'},
    ],
)


@app.get(
    '/{format}/AllTeams',
    tags=['team_operations', 'team_statistical_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams_all(format: Format = 'XML'):
    """
    Teams (All)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/AreAnyGamesInProgress',
    description=""" Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none. """,
    tags=['game_statistics', 'game_schedules'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def are_games_in_progress(format: Format = 'XML'):
    """
    Are Games In Progress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/BoxScore/{gameid}',
    tags=['game_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def box_score(format: Format = 'XML', gameid: str = ...):
    """
    Box Score
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/BoxScores/{date}',
    tags=['game_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def box_scores_by_date(format: Format = 'XML', date: str = ...):
    """
    Box Scores by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/BoxScoresDelta/{date}/{minutes}',
    tags=['game_statistics', 'team_operations'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def box_scores_by_date_delta(
    format: Format = 'XML', date: str = ..., minutes: str = ...
):
    """
    Box Scores by Date Delta
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/CurrentSeason',
    tags=['season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def current_season(format: Format = 'XML'):
    """
    Current Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/DfsSlatesByDate/{date}',
    tags=['fantasy_sports_data', 'game_schedules'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def dfs_slates_by_date(format: Format = 'XML', date: str = ...):
    """
    DFS Slates by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/FreeAgents',
    tags=['player_statistics', 'team_organization_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_free_agents(format: Format = 'XML'):
    """
    Player Details by Free Agents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Games/{season}',
    tags=['game_schedules', 'season_summary', 'team_operations'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def schedules(format: Format = 'XML', season: str = ...):
    """
    Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/GamesByDate/{date}',
    tags=['game_statistics', 'game_schedules'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def games_by_date(format: Format = 'XML', date: str = ...):
    """
    Games by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/HitterVsPitcher/{hitterid}/{pitcherid}',
    tags=['player_statistics', 'batter_vs_pitcher_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def batter_vs_pitcher_stats(
    format: Format = 'XML', hitterid: str = ..., pitcherid: str = ...
):
    """
    Batter vs. Pitcher Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/News',
    tags=['news_and_updates'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news(format: Format = 'XML'):
    """
    News
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/NewsByDate/{date}',
    tags=['news_and_updates'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news_by_date(format: Format = 'XML', date: str = ...):
    """
    News by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/NewsByPlayerID/{playerid}',
    tags=['news_and_updates', 'player_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def news_by_player(format: Format = 'XML', playerid: str = ...):
    """
    News by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Player/{playerid}',
    tags=['player_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_player(format: Format = 'XML', playerid: str = ...):
    """
    Player Details by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerGameStatsByDate/{date}',
    tags=['game_statistics', 'player_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_game_stats_by_date(format: Format = 'XML', date: str = ...):
    """
    Player Game Stats by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerGameStatsByPlayer/{date}/{playerid}',
    tags=['player_statistics', 'game_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_game_stats_by_player(
    format: Format = 'XML', date: str = ..., playerid: str = ...
):
    """
    Player Game Stats by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}',
    tags=['player_statistics', 'season_summary', 'game_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_game_logs_by_season(
    format: Format17, season: str = ..., playerid: str = ..., numberofgames: str = ...
):
    """
    Player Game Logs By Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonAwayStats/{season}',
    tags=['player_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_away_stats(format: Format18 = 'XML', season: str = ...):
    """
    Player Season Away Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonHomeStats/{season}',
    tags=['player_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_home_stats(format: Format18 = 'XML', season: str = ...):
    """
    Player Season Home Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonSplitStats/{season}/{split}',
    tags=['player_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_split_stats(
    format: Format18 = 'XML', season: str = ..., split: Split = 'L'
):
    """
    Player Season Split Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonStats/{season}',
    tags=['player_statistics', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_stats(format: Format18 = 'XML', season: str = ...):
    """
    Player Season Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonStatsByPlayer/{season}/{playerid}',
    tags=['player_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_stats_by_player(
    format: Format18 = 'XML', season: str = ..., playerid: str = ...
):
    """
    Player Season Stats By Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonStatsByTeam/{season}/{team}',
    tags=['team_operations', 'season_summary', 'team_statistical_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_stats_by_team(
    format: Format18 = 'XML', season: str = ..., team: str = ...
):
    """
    Player Season Stats by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayerSeasonStatsSplitByTeam/{season}',
    tags=['player_statistics', 'season_summary', 'team_statistical_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_season_stats_split_by_team(format: Format18 = 'XML', season: str = ...):
    """
    Player Season Stats Split By Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players',
    tags=['player_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player_details_by_active(format: Format18 = 'XML'):
    """
    Player Details by Active
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players/{team}',
    tags=['team_operations', 'player_statistics', 'team_statistical_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def players_by_team(format: Format18 = 'XML', team: str = ...):
    """
    Players by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Stadiums',
    tags=['stadium_data'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def stadiums(format: Format27 = 'xml'):
    """
    Stadiums
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Standings/{season}',
    tags=['team_operations', 'season_summary'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def standings(format: Format28 = 'XML', season: str = ...):
    """
    Standings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStatsByDate/{date}',
    tags=['game_statistics', 'team_operations'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_stats_by_date(format: Format28 = 'XML', date: str = ...):
    """
    Team Game Stats by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}',
    description=""" Game by game log of total team statistics. """,
    tags=[
        'team_operations',
        'game_statistics',
        'season_summary',
        'team_statistical_analysis',
    ],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_game_logs_by_season(
    format: Format30, season: str = ..., teamid: str = ..., numberofgames: str = ...
):
    """
    Team Game Logs By Season
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamHittersVsPitcher/{gameid}/{team}',
    tags=['batter_vs_pitcher_analysis', 'game_statistics', 'team_operations'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_hitting_vs_starting_pitcher(
    format: Format31 = 'XML', gameid: str = ..., team: str = ...
):
    """
    Team Hitting vs. Starting Pitcher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/TeamSeasonStats/{season}',
    tags=['team_operations', 'season_summary', 'team_statistical_analysis'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def team_season_stats(format: Format31 = 'XML', season: str = ...):
    """
    Team Season Stats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/teams',
    tags=['team_operations', 'team_organization_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams_active(format: Format31 = 'XML'):
    """
    Teams (Active)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
